<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
<title>The Little Conclusion</title>
 
  
  <blockquote>
    <para>
      This last chapter was kindly contributed by Jeremy Ashkenas, the
      author of CoffeeScript
    </para>
  </blockquote>
  <para>
    You've reached the end of the Little Book on CoffeeScript, and now
    you know just about everything you'll need. CoffeeScript is a little
    language at heart, and if you know JavaScript and have a sense of
    the philosophy behind the changes that CoffeeScript makes to
    JavaScript, you should be able to get up and running very quickly
    indeed.
  </para>
  <sect1>
    <title>Philosophy</title>
    <para>
      Unlike most programming languages, CoffeeScript was never designed
      from the ground up. It has always been an attempt to express core
      JavaScript concepts in as simple and minimal a syntax as we can
      find for them.
    </para>
    <para>
      Let's take a simple function. To produce the square of
      <literal>x</literal>, we multiply <literal>x</literal> by itself.
      In JavaScript:
    </para>
    <screen>
var square = function(x) {
  return x * x;
};
</screen>
    <para>
      To derive the CoffeeScript for this, let's think through the steps
      it would take to reduce this function to its essential features.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          We can understand the code perfectly well without the
          semicolons, so let's drop those.
        </para>
      </listitem>
      <listitem>
        <para>
          Instead of using <literal>{</literal> and <literal>}</literal>
          to delimit the body of the function, let's use the indentation
          that's already present on the page.
        </para>
      </listitem>
      <listitem>
        <para>
          It's clear that we're defining a new function, so let's drop
          the redundant <literal>var</literal> in front of the
          assignment.
        </para>
      </listitem>
      <listitem>
        <para>
          Every construct in CoffeeScript should be an expression with a
          value, so the natural value of a function body is the last
          line of code it executes ... allowing us to omit the
          <literal>return</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          Finally, we replace
          <literal>function( input ){ output }</literal> with a function
          literal that visually represents the idea that the input of a
          function "points to" the output:
          <literal>(input) -&gt; output</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Voil√°, the CoffeeScript version:
    </para>
    <screen>
square = (x) -&gt; x * x
</screen>
    <para>
      Every language feature in CoffeeScript has been designed using
      this kind of process: attempt to take the beautiful dynamic
      semantics of JavaScript -- object literals, function expressions,
      prototypal inheritance -- and express them in a clean, readable,
      minimal way.
    </para>
  </sect1>
  <sect1>
    <title>It's Just JavaScript</title>
    <para>
      CoffeeScript tries to be a deeply pragmatic language. To be
      honest, it's probably too pragmatic for its own good. The golden
      rule of CoffeeScript is: "It's just JavaScript".
    </para>
    <para>
      We want to embrace the limitations of compiling to JavaScript by
      only implementing things that can be expressed in simple JS, and
      leaving fancier compilations to
      <ulink url="https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS">other
      languages</ulink>. When you run a script, there is no CoffeeScript
      interpreter running within the browser, no core library you have
      to include on the page, and ideally (although we bend this rule in
      a few places) no special helper functions generated alongside your
      code.
    </para>
    <para>
      The downside of this approach is that more invasive improvements
      to JavaScript are impossible. For example, it would be nice if
      <literal>list[-1]</literal> in CoffeeScript could return the last
      item in the list. At first glance, it seems simple enough to
      implement, and would be useful. Unfortunately, any expression may
      be used to index into an array, so with negative array indices you
      would have to add a special check to every
      <literal>list[x]</literal> operation to ask if
      <literal>x</literal> is a positive number or a negative one. This
      would take CoffeeScript away from JavaScript semantics, and more
      importantly, JavaScript levels of performance -- the array
      accesses in your inner loops would slow down considerably. For
      this reason, CoffeeScript doesn't add negative array indices to
      the language.
    </para>
    <para>
      The upside of this approach is that CoffeeScript is inherently
      compatible with every JavaScript runtime. Because we can compile
      to efficient, lowest-common-denominator code, CoffeeScript runs as
      well as JavaScript in every browser, in Node.js, in Rhino, in
      Photoshop and Illustrator -- in short, everywhere JavaScript can
      run. If you want to use CoffeeScript for a project, for a
      component, or even just for a single file, you don't have to
      sacrifice performance or compatibility with other JavaScript
      libraries.
    </para>
  </sect1>
  <sect1>
    <title>Build Your Own JavaScript</title>
    <para>
      There's a hidden motive running as a subtext beneath CoffeeScript.
      I hope that this book doesn't merely serve as an introduction, but
      spurs you to experiment with compile-to-JavaScript languages of
      your very own.
    </para>
    <para>
      To that end, the CoffeeScript compiler has been
      <ulink url="http://coffeescript.org/documentation/docs/grammar.html">fully
      annotated with commentary</ulink> to make it easier to get started
      prototyping changes and improvements. The entire thing is only
      around 2,500 lines of code, and there have been a
      <ulink url="https://github.com/satyr/coco">number</ulink> of
      <ulink url="http://weepy.github.com/kaffeine/">interesting</ulink>
      <ulink url="http://disnetdev.com/contracts.coffee/">forks</ulink>
      already that push JavaScript in different directions.
    </para>
    <para>
      If you've ever felt confined by JavaScript, there's no need to
      wait around for browser implementors or the slow march of the
      standards process. By using a compile-to-JS language, you can give
      yourself the JavaScript of your dreams today. I'm looking forward
      to seeing more little languages out there in the wild soon.
    </para>
  </sect1>


</chapter>