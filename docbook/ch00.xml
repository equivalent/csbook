<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
<title>What is CoffeeScript?</title>
 
  
  <para>
    <ulink url="http://coffeescript.org">CoffeeScript</ulink> is a
    little language that compiles down to JavaScript. The syntax is
    inspired by Ruby and Python, and implements many features from those
    two languages. This book is designed to help you learn CoffeeScript,
    understand best practices and start building awesome client side
    applications. The book is little, only five chapters, but that's
    rather apt as CoffeeScript is a little language too.
  </para>
  <para>
    This book is completely open source, and was written by
    <ulink url="http://alexmaccaw.co.uk">Alex MacCaw</ulink> (or
    <ulink url="http://twitter.com/maccman">@maccman</ulink>) with great
    contributions from <ulink url="https://github.com/dxgriffiths">David
    Griffiths</ulink>, <ulink url="http://github.com/satyr">Satoshi
    Murakami</ulink>, and
    <ulink url="https://github.com/jashkenas">Jeremy Ashkenas</ulink>.
  </para>
  <para>
    If you have any errata or suggestions, please don't hesitate to open
    a ticket on the book's
    <ulink url="https://github.com/arcturo/library">GitHub page</ulink>.
    Readers may also be interested in
    <ulink url="http://oreilly.com/catalog/9781449307530/">JavaScript
    Web Applications by O'Reilly</ulink>, a book I authored that
    explores rich JavaScript applications and moving state to the client
    side.
  </para>
  <para>
    So let's dive right into it; why is CoffeeScript better than writing
    pure JavaScript? Well for a start, there's less code to write -
    CoffeeScript is very succinct, and takes white-space into account.
    In my experience this reduces code by a third to a half of the
    original pure JavaScript. In addition, CoffeeScript has some neat
    features, such as array comprehensions, prototype aliases and
    classes that further reduce the amount of typing you need to do.
  </para>
  <para>
    More importantly though, JavaScript has a lot of
    <ulink url="http://bonsaiden.github.com/JavaScript-Garden/">skeletons
    in its closet</ulink> which can often trip up inexperienced
    developers. CoffeeScript neatly sidesteps these by only exposing a
    curated selection of JavaScript features, fixing many of the
    language's oddities.
  </para>
  <para>
    CoffeeScript is <emphasis>not</emphasis> a superset of JavaScript,
    so although you can use external JavaScript libraries from inside
    CoffeeScript, you'll get syntax errors if you compile JavaScript
    as-is, without converting it. The compiler converts CoffeeScript
    code into its counterpart JavaScript, there's no interpretation at
    runtime.
  </para>
  <para>
    First to get some common fallacies out the way. You will need to
    know JavaScript in order to write CoffeeScript, as runtime errors
    require JavaScript knowledge. However, having said that, runtime
    errors are usually pretty obvious, and so far I haven't found
    mapping JavaScript back to CoffeeScript to be an issue. The second
    problem I've often heard associated with CoffeeScript is speed; i.e.
    the code produced by the CoffeeScript compiler would run slower than
    its equivalent written in pure JavaScript. In practice though, it
    turns out this isn't a problem either. CoffeeScript tends to run as
    fast, or faster than hand-written JavaScript.
  </para>
  <para>
    What are the disadvantages of using CoffeeScript? Well, it
    introduces another compile step between you and your JavaScript.
    CoffeeScript tries to mitigate the issue as best it can by producing
    clean and readable JavaScript, and with its server integrations
    which automate compilation. The other disadvantage, as with any new
    language, is the fact that the community is still small at this
    point, and you'll have a hard time finding fellow collaborators who
    already know the language. CoffeeScript is quickly gaining momentum
    though, and its IRC list is well staffed; any questions you have are
    usually answered promptly.
  </para>
  <para>
    CoffeeScript is not limited to the browser, and can be used to great
    effect in server side JavaScript implementations, such as
    <ulink url="http://nodejs.org/">Node.js</ulink>. Additionally,
    CoffeeScript is getting much wider use and integration, such as
    being a default in Rails 3.1. Now is definitely the time to jump on
    the CoffeeScript train. The time you invest in learning about the
    language now will be repaid by major time savings later.
  </para>
  <sect1>
    <title>Initial setup</title>
    <para>
      One of the easiest ways to initially play around with the library
      is to use it right inside the browser. Navigate to
      <ulink url="http://coffeescript.org">http://coffeescript.org</ulink>
      and click on the <emphasis>Try CoffeeScript</emphasis> tab. The
      site uses a browser version of the CoffeeScript compiler,
      converting any CoffeeScript typed inside the left panel to
      JavaScript in the right panel.
    </para>
    <para>
      You can also convert JavaScript back to CoffeeScript using the
      <ulink url="http://js2coffee.org/">js2coffee</ulink> project,
      especially useful when migrating JavaScript projects to
      CoffeeScript.
    </para>
    <para>
      In fact, you can use the browser-based CoffeeScript compiler
      yourself, by including
      <ulink url="http://jashkenas.github.com/coffee-script/extras/coffee-script.js">this
      script</ulink> in a page, marking up any CoffeeScript script tags
      with the correct <literal>type</literal>.
    </para>
    <screen>
&lt;script src="http://jashkenas.github.com/coffee-script/extras/coffee-script.js" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;
&lt;script type="text/coffeescript"&gt;
  # Some CoffeeScript
&lt;/script&gt;
</screen>
    <para>
      Obviously, in production, you don't want to be interpreting
      CoffeeScript at runtime as it'll slow things up for your clients.
      Instead CoffeeScript offers a
      <ulink url="http://nodejs.org">Node.js</ulink> compiler to
      pre-process CoffeeScript files.
    </para>
    <para>
      To install it, first make sure you have a working copy of the
      latest stable version of
      <ulink url="http://nodejs.org">Node.js</ulink>, and
      <ulink url="http://npmjs.org/">npm</ulink> (the Node Package
      Manager). You can then install CoffeeScript with npm:
    </para>
    <screen>
npm install -g coffee-script
</screen>
    <para>
      This will give you a <literal>coffee</literal> executable. If you
      execute it without any command line options, it'll give you the
      CoffeeScript console, which you can use to quickly execute
      CoffeeScript statements. To pre-process files, pass the
      <literal>--compile</literal> option.
    </para>
    <screen>
coffee --compile my-script.coffee
</screen>
    <para>
      If <literal>--output</literal> is not specified, CoffeeScript will
      write to a JavaScript file with the same name, in this case
      <literal>my-script.js</literal>. This will overwrite any existing
      files, so be careful you're not overwriting any JavaScript files
      unintentionally. For a full list of the command line options
      available, pass <literal>--help</literal>.
    </para>
    <para>
      As you can see above, the default extension of CoffeeScript files
      is <literal>.coffee</literal>. Amongst other things, this will
      allow text editors like
      <ulink url="http://macromates.com/">TextMate</ulink> to work out
      which language the file contains, giving it the appropriate syntax
      highlighting. By default, TextMate doesn't include support for
      CoffeeScript, but you can easily install the
      <ulink url="https://github.com/jashkenas/coffee-script-tmbundle">bundle
      to do so</ulink>.
    </para>
    <para>
      If all this compilation seems like a bit of an inconvenience and
      bother, that's because it is. We'll be getting onto ways to solve
      this by automatically compiling CoffeeScript files, but first lets
      take a look at the language's syntax.
    </para>
  </sect1>


</chapter>